name: deploy workflow
on:
  workflow_call:
      
jobs:
  deploy:
      runs-on: ubuntu-latest
      environment: devnet
      steps:
        - uses: actions/checkout@v4
        - name: Downloading elys
          run: |
            URL=https://github.com/elys-network/elys/releases/download/v0.30.0/elysd-v0.30.0-linux-amd64
            wget $URL -O elysd
            chmod +x elysd
        - name: Set up Rust
          uses: actions-rs/toolchain@v1
          with:
            profile: minimal
            toolchain: stable
        - name: Compile
          run: |
              VERSION=$(cat .version)
              sed -i "s/^version = .*/version = \"$VERSION\"/" contracts/account-history-contract/Cargo.toml
              sed -i "s/^version = .*/version = \"$VERSION\"/" contracts/trade-shield-contract/Cargo.toml
              sed -i "s/^version = .*/version = \"$VERSION\"/" contracts/financial-snapshot-contract/Cargo.toml
              cargo update
              
              docker run --rm -v "$(pwd)":/code \
              --mount type=volume,source="$(basename "$(pwd)")_cache",target=/target \
              --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \
              cosmwasm/workspace-optimizer:0.14.0
        - name: Deploy
          run: |    
              # helper functions
              extract_txhash() { awk -F 'txhash: ' '/txhash:/{print $2; exit}'; }
              extract_code_id() { awk -F 'key: code_id|value: ' '/key: code_id/ { getline; gsub(/"/, "", $2); print $2; exit }'; }
              extract_contract_address() { awk -F 'key: _contract_address|value: ' '/key: _contract_address/ { getline; gsub(/"/, "", $2); print $2; exit }'; }
              extract_account_number() { awk -F 'account_number: ' '/account_number:/ { gsub(/"/, "", $2); print $2 + 0; exit; }'; }
              extract_sequence() { awk -F 'sequence: ' '/sequence:/ { gsub(/"/, "", $2); print $2 + 0; exit; }'; }

              ELYSD=./elysd

              wait_for_tx() {
                local txhash=$1
                # loop until query tx cli does not fail
                while ! $ELYSD q tx $txhash --node "$NODE" &> /dev/null; do
                    echo "Waiting for the transaction $txhash to be included in a block..."
                    sleep 0.5
                done
              }

              exit_if_tx_is_empty() {
                local tx=$1
                if [[ -z "$tx" ]]; then
                    echo "Error: there is not a txhash"
                    exit 1
                fi
              }

              NODE= ${{ vars.NODE }}
              NAME= ${{ vars.NAME }}
              CHAIN_ID= ${{ vars.CHAIN_ID }}

              $ELYSD config keyring-backend test
              $ELYSD config node $NODE
              $ELYSD config chain-id $CHAIN_ID
              $ELYSD config broadcast-mode sync

       
              echo "${{ secrets.PRIVATE_KEY_MALLORCA }}" > /tmp/private_key_mallorca.txt
              echo "${{ secrets.PASSPHRASE_MALLORCA }}" | $ELYSD keys import mallorca --keyring-backend test /tmp/private_key_mallorca.txt

              user_address=$(echo "${{ secrets.PASSPHRASE_MALLORCA }}" | $ELYSD keys show $NAME -a)
                          
              account_number=$($ELYSD q account $user_address --node $NODE | extract_account_number)
              sequence=$($ELYSD q account $user_address --node $NODE | extract_sequence)

              echo "account_number: $account_number"
              echo "sequence: $sequence"

              OPTIONS="--from $NAME --node $NODE --chain-id $CHAIN_ID --keyring-backend=test --gas auto --gas-adjustment 1.3 --fees 300000uelys -y --account-number $account_number -b async --log_level trace --trace"

           